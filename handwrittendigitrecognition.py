# -*- coding: utf-8 -*-
"""handwrittenDigitRecognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xt9Yo0JhwHv9MC11r5DUJlTAxLvPtAbb
"""

import numpy as np

from sklearn.datasets import load_digits

dataset=load_digits()

#OR
import pandas as pd
df = pd.DataFrame(data=dataset, columns=dataset.feature_names)
df.isnull().sum().sum()
df

# df = pd.DataFrame(data=dataset.data, columns=[f'pixel_{i}' for i in range(dataset.data.shape[1])])

# # Add target values as a separate column
# df['target'] = dataset.target
# df

print(dataset.images)

print(dataset.target)

dataset.images.shape

import matplotlib.pyplot as plt
n=7
plt.gray()
plt.matshow(dataset.images[n])
plt.show()
print("\n")
dataset.images[n]

dataimageLength=len(dataset.images)
X=dataset.images.reshape((dataimageLength,-1))
X

Y=dataset.target
Y

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25)

print (X_train.shape)
print(X_test.shape)

from sklearn import svm
model =svm.SVC(kernel='linear')
model.fit(X_train,Y_train)

Y_pred=model.predict(X_test)
print(np.concatenate((Y_pred.reshape(len(Y_pred),1),Y_test.reshape(len(Y_test),1)),1))

from sklearn.metrics import accuracy_score
print("Accuracy Score : ",accuracy_score(Y_test,Y_pred)*100)

from sklearn.metrics import precision_score


precision_per_class = precision_score(Y_test,Y_pred, average=None)


# Print precision for each class
for i, precision in enumerate(precision_per_class):
    print(f'Precision for class {i}: {precision}')

model2 =svm.SVC(kernel='rbf')
model3 =svm.SVC(gamma=0.001)
model4 =svm.SVC(gamma=0.001,C=0.1)


model2.fit(X_train,Y_train)
model3.fit(X_train,Y_train)
model4.fit(X_train,Y_train)

Y_pred2=model2.predict(X_test)
Y_pred3=model3.predict(X_test)
Y_pred4=model4.predict(X_test)

print("Accuracy Score model 2: ",accuracy_score(Y_test,Y_pred2)*100)
print("Accuracy Score model 3: ",accuracy_score(Y_test,Y_pred3)*100)
print("Accuracy Score model 4: ",accuracy_score(Y_test,Y_pred4)*100)


precision_per_class = precision_score(Y_test,Y_pred2, average=None)


print("For Model no 2")
for i, precision in enumerate(precision_per_class):

    print(f'Precision for class {i}: {precision}')


precision_per_class = precision_score(Y_test,Y_pred3, average=None)


print("For Model no 3")
for i, precision in enumerate(precision_per_class):

    print(f'Precision for class {i}: {precision}')

precision_per_class = precision_score(Y_test,Y_pred4, average=None)


print("For Model no 3")
for i, precision in enumerate(precision_per_class):

    print(f'Precision for class {i}: {precision}')

# data = {'Class 0':20, 'Class 1':15, 'Java':30,
#         'Python':35}
# courses = list(data.keys())
# values = list(data.values())

# fig = plt.figure(figsize = (10, 5))

# # creating the bar plot
# plt.bar(courses, values, color ='maroon',
#         width = 0.4)

# plt.xlabel("Courses offered")
# plt.ylabel("No. of students enrolled")
# plt.title("Students enrolled in different courses")
# plt.show()



# #OR
# df = pd.DataFrame(data=dataset.data, columns=[f'pixel_{i}' for i in range(dataset.data.shape[1])])

# # Add target values as a separate column
# df['target'] = dataset.target
# df

# from sklearn.metrics import confusion_matrix


# cm = confusion_matrix(Y_test,Y_pred)

# print("Confusion Matrix:")
# print(cm)

# n=7
# result=model.predict(dataset.images[n].reshape((1,-1)))
# plt.imshow(dataset.images[n],cmap=plt.cm.gray_r,interpolation='nearest')
# print(result)
# print("\n")
# plt.axis('OFF')
# plt.title('%i'%result)
# plt.show()